<!DOCTYPE html>
<html>
<meta charset="utf-8">
<title>Marchés publics</title>
    <style>
    

body {
  font-family: courier new;
}

#circle circle {
  fill: none;
  pointer-events: all;
}

.group path {
  fill-opacity: .5;
}

path.chord {
  stroke: #000;
  stroke-width: .25px;

}

.chord path {
    fill-opacity: .67;
    stroke: #000;
    stroke-width: .5px;
}

#circle:hover path.fade {
  display: none;
}

 
        .filtreSection {
            font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
            margin: auto;
            width: 200px;
        }

  #graphprincipal {
    width : 1000px;
    margin:auto;
  }


  #menu {
  width: 200px;
  float: left;
  margin-right: 30px;

  }

  #type {
    height: 50px;
  }

  .typevizcontainer {
  width: 200px;
  border: 3px solid rgb(230,230,230);
  border-radius: 5px;
  background-color: rgb(250, 250, 250);  
  padding: 5px;
  }

  .eltMenu {
    margin:auto;
    margin-top:20px;
  }

  #mainGraph {
  width: 750px;
  float:left;
  }

  #infos{
    width: 200px;
  }

  #lstmenus{
    margin-top: 3px;
  }

  #chord {
  position:absolute;
  z-index:2;
  }

  #bubbles {
  position:absolute;
  z-index:1;
  }

    .graphSection {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        margin: auto;
        width: 100px;
    }
    
    .detailSection {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        margin: auto;
        width: 100px;
    }
    
    .arc path {
        stroke: #fff;
    }
    
    .svgEuro text {
    fill: white;
    font: 10px sans-serif;
    //text-anchor: end;
  }
/* mise en forme bulles */  
  .node {
 cursor: pointer;
}

.node:hover {
 stroke: #000;
 stroke-width: 1.5px;
}

.node--root {
 stroke: #777;
 stroke-width: 2px;
}

.node--leaf {
 fill: black;
}

.label {
 fill:white;
 font: 14px;
 text-anchor: middle;
 text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;
}

.label,
.node--root,
.node--leaf {
 pointer-events: none;
}


    /*form {
        position: absolute;
        right: 10px;
        top: 10px;
    }*/
    

    
        </style>


<body>
        
    <div id="graphprincipal">
          <h1>Marchés publics 2011 - 2012</h1>
      <div id="menu">
          <div id="type" class="typevizcontainer">
            <div>Overview - Cordes</div>
            <svg class="svgTypeVizContainer">
            </svg>
          </div>
          <div id="lstmenus" class="typevizcontainer lstmenus">
            <div class="slider eltMenu">
              Année(s): <output id="oanneeval" for="sliderAnnee">All</output>
              <input id="sliderAnnee" type="range" min="2010" max="2012" step="1" value="2010" onchange="changeAnnee()"
               oninput="if(this.value!=2010) {this.title=this.value;} else {this.title='All';};oanneeval.value=sliderAnnee.title;">
            </div>         
            <div class="svgEntiteContainer eltMenu">
                <div>Ministères</div>
                <div class="selectedMinistere">
                </div>
                <div class="selectedService">
                </div>
            </div>

            <div class="svgNatureContainer eltMenu">
                <div>Nature du contrat</div>
                <div class="selectedNature">
                </div>
            </div>
            <div class="slider eltMenu">
              Nombre marchés: <output id="oSliderAnneeValeurs" for="sliderNbValeurs">70</output>
              <input id="sliderNbValeurs" type="range" min="15" max="300" step="5" value="70" onchange="changeNbValeurs()" oninput="this.title=this.value; oSliderAnneeValeurs.value=sliderNbValeurs.title;">
            </div>
          </div>
    </div>
    

    <div id="mainGraph">
      <div id="chord">
          <div class="svgGraphMinistereContainer">
          </div>
          <div class="svgGraphServiceContainer">
          </div>
      </div>
      <div id="bubbles" class="bubbles">
      </div>
      <div id="titreGraph"></div>
    </div>
    <div id="infos">
    </div>
  </div>
        

<script src="d3.js"></script>
<script>

var listMinistere = new Array();
var listNature = new Array();
var listAnnee = new Array();

var selectedMinistere=""
var selectedNature="";
var selectedAnnee="";
var selectedMontantMin=100;
var nbvaleurs=50;
var valVide = "All"; //texte à afficher si pas de filtre sur la valeur 
var bubbleViz = false;
var titreGraphText=["Marchés par Ministère","Marchés les plus importants par Ministère"];
var couleurs = ["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"];
//var couleurs = ["#000000", "#FFDD89", "#957244"];
//var couleurs = ["#c80913","#89d3da","#de6423","#3552e3","#f8c633","#917dc3","#c9cb25","#c775db"];
/*
var scalecouleur = d3.scale.linear().domain([0,16]).range(["violet","white"]);
var scalecouleur2 = d3.scale.linear().domain([0,16]).range(["green","white"]);
//var scalecouleur = d3.scale.category20();
for (i=0;i<17;i++){
  if(Math.round(i/2)==i/2) {couleurs[i]=scalecouleur(i);} else {couleurs[i]=scalecouleur2(i);};
}
*/


function initBubbles() {

var margin = 10,
   outerDiameter = 720,
   innerDiameter = outerDiameter - margin - margin;

var x = d3.scale.linear()
   .range([0, innerDiameter]);

var y = d3.scale.linear()
   .range([0, innerDiameter]);

var color = d3.scale.linear()
   .domain([-1, 5])
   .range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])
   .interpolate(d3.interpolateHcl);

var pack = d3.layout.pack()
   .padding(2)
   .size([innerDiameter, innerDiameter])
   .value(function(d) { return d.size; })

//var svg = d3.select(".body").append("svg")
var svg = d3.select(".bubbles").append("svg")
   .attr("width", outerDiameter)
   .attr("height", outerDiameter)
 .append("g")
   .attr("transform", "translate(" + margin + "," + margin + ")");

d3.json("data/bubbles.json", function(error, root) {
 var focus = root,
     nodes = pack.nodes(root);

 svg.append("g").selectAll("circle")
     .data(nodes)
   .enter().append("circle")
     .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })
     .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
     .attr("r", function(d) { return d.r; })
     .style("fill", function(d) { return d.children ? color(d.depth) : null; })
     .on("click", function(d) { return zoom(focus == d ? root : d); });


 svg.append("g").selectAll("text")
     .data(nodes)
   .enter().append("text")
     .attr("class", "label")
     .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
     .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })
     .style("display", function(d) { return d.parent === root ? null : "none"; })
     //.style("color","red")
     .text(function(d) { return d.name; });




 d3.select(window)
     .on("click", function() { zoom(root); });

 function zoom(d, i) {
   var focus0 = focus;
   focus = d;

   var k = innerDiameter / d.r / 2;
   x.domain([d.x - d.r, d.x + d.r]);
   y.domain([d.y - d.r, d.y + d.r]);
   d3.event.stopPropagation();

   var transition = d3.select(".bubbles").selectAll("text,circle").transition()
       .duration(d3.event.altKey ? 7500 : 750)
       .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

   transition.filter("circle")
       .attr("r", function(d) { return k * d.r; });

   transition.filter("text")
     .filter(function(d) { return d.parent === focus || d.parent === focus0; })
       .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })
       .each("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
       .each("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });


    d3.selectAll("text.label")
    .style("font", "Arial 10px")
    .style("color","red");
 }
});

d3.select(self.frameElement).style("height", outerDiameter + "px");

}



function initTypeViz()
{
  bubbleViz.value = true;
  
  var chart = d3.select(".svgTypeVizContainer")
    .attr("width", 200)
    .attr("height", 40);
    
  bubbleCircle = chart.append("circle")
    .attr("cx", 20)
    .attr("cy", 20)
    .attr("r", 10)
    .on("click", setBubble);
    
  chordCircle = chart.append("circle")
    .attr("cx", 50)
    .attr("cy", 20)
    .attr("r", 10)
    .on("click", setChord);
}


// Set euro
function setBubble()
{
  bubbleViz.value = true;
  bubbleCircle.style("fill", "#0db13b");
  chordCircle.style("fill", "#bdf1cc");
  d3.select(".svgGraphMinistereContainer").selectAll("svg")
  .style("opacity", 1)
  .transition().duration(800).style("opacity", 0);
  
  d3.select(".bubbles").selectAll("svg")
  .style("z-index",0)
  .style("opacity", 0)
  .transition().duration(800).style("opacity", 1);

  d3.select(".bubbles").style("z-index",2);
  d3.select(".chord").style("z-index",1);

  d3.select(".lstmenus").style("opacity",1).transition().duration(800).style("opacity",0);
  //d3.select(".titreGraph").append("text").text("sqdfsqd");
}


function setChord()
{
  bubbleViz.value = false;
  bubbleCircle.style("fill", "#bdf1cc");
  chordCircle.style("fill", "#0db13b");
  d3.select(".bubbles").selectAll("svg")
  .style("opacity", 1)
  .transition().duration(800).style("opacity", 0);
  d3.select(".svgGraphMinistereContainer").selectAll("svg")
  .style("opacity", 0)
  .transition().duration(800).style("opacity", 1);

  d3.select(".bubbles").style("z-index",1);
  d3.select(".chord").style("z-index",2);
  d3.select(".lstmenus").style("opacity",0).transition().duration(800).style("opacity",1);

}

initTypeViz();
initBubbles();
setChord();


function onlyUnique(value, index, self) { 
   return self.indexOf(value) === index;
  }


//Menus / filtres
d3.tsv("data/mpublics2011-2012.csv", function(data) {
    



  data.map(function(d) {
    listMinistere.push(d.Ministere);
    listNature.push(d.NatureduMarche.toLowerCase().replace(/ /g,""));
    listAnnee.push(d.Annee);
    
  });
      
    listMinistere = listMinistere.filter(onlyUnique);
    listAnnee = listAnnee.filter(onlyUnique);
    listNature = listNature.filter(onlyUnique);
    
    

  var arcNature = new Array();
  for (i=0;i<listNature.length;i++){
    arcNature[i] = new Object;
    arcNature[i].item = 1;
    //arcNature[i].end = i+1;
    arcNature[i].label = listNature[i];
  }
  var row = new Object;
  row.item = 1;
  row.label = valVide;
  arcNature.push(row);

console.log(arcNature);

  var arcMinistere = new Array();
  for (i=0;i<listMinistere.length;i++){
    arcMinistere[i] = new Object;
    arcMinistere[i].item = 1;
    //arcNature[i].end = i+1;
    arcMinistere[i].label = listMinistere[i];
  }
  var row = new Object;
  row.item = 1;
  row.label = valVide;
  arcMinistere.push(row);
  

initArcNature();

function initArcNature() {
  console.log(arcNature);
  
  
  var width = 200,
  height = 200,
  radius = Math.min(width, height) / 2;

  var color = d3.scale.ordinal()
      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

  var arc = d3.svg.arc()
      .outerRadius(radius - 10)
      .innerRadius(radius - 70);

  var pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return d.item; });

  var svg = d3.select(".svgNatureContainer").append("svg")
      .attr("width", width)
      .attr("height", height)
      .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  var g = svg.selectAll(".arc")
      .data(pie(arcNature))
      .enter().append("g")
      .attr("class", "arc");

  g.append("path")
      .attr("d", arc)
      .style("fill", function(d) { return color(d.data.label); })
      .on("click", mouseClickNature);

  g.append("text")
      .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")"; })
      .attr("dy", ".35em")
      .style("text-anchor", "middle")
      .text(function(d) { return d.data.label; });

  function mouseClickNature(d){

  selectedNature = d.data.label;
  if (selectedNature == valVide) {
    selectedNature = "";
  }
  console.log(selectedNature);
  d3.select(".svgGraphMinistereContainer").select("svg").remove();
  console.log(bubbleViz);
  //if(bubbleViz.value==true){setChord();};
  draw();

  }
}




initArcMinistere();

function initArcMinistere(){
  


/*
  var width = 200,
  height = 200,
  radius = Math.min(width, height) / 2;

  

  var b = d3.select(".svgEntiteContainer");

    var u=b.append("select");
    var t=u.selectAll("option").data(arcMinistere).enter().append("option")
        .attr("value",function(d){return d.label;})
        .text(function(d){return d3.select(this).node().__data__.label;});
    t.on("change",mouseClickMinistere);

  }*/

    var width = 200,
  height = 200,
  radius = Math.min(width, height) / 2;

  var color = d3.scale.ordinal()
      .range(couleurs);
      //.range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

  var arc = d3.svg.arc()
      .outerRadius(radius - 10)
      .innerRadius(radius - 70);

  var pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return d.item; });

  var svg = d3.select(".svgEntiteContainer").append("svg")
      .attr("width", width)
      .attr("height", height)
      .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  var g = svg.selectAll(".arc")
      .data(pie(arcMinistere))
      .enter().append("g")
      .attr("class", "arc");

  g.append("path")
      .attr("d", arc)
      .style("fill", function(d) { return color(d.data.label); })
      .on("click", mouseClickMinistere);

  g.append("text")
      .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")"; })
      .attr("dy", ".35em")
      .style("font", "normal 8px Arial")
      .style("text-anchor", "middle")
      .text(function(d) { return d.data.label; });


  
  function mouseClickMinistere(d){
    
    selectedMinistere = d.data.label;
    if (selectedMinistere == valVide) {
    selectedMinistere = "";
    }
    d3.select(".svgGraphMinistereContainer").select("svg").remove();
    //if(bubbleViz.value==true){setChord();}; fonctionne pas
    draw();
  }

}
  



});

//listMinistere.filter(onlyUnique);

function changeNbValeurs() {
  nbvaleurs = document.getElementById("sliderNbValeurs").value;
  d3.select(".svgGraphMinistereContainer").select("svg").remove();
  draw();
}

function changeAnnee() {
  selectedAnnee = document.getElementById("sliderAnnee").value;
  if(selectedAnnee==2010){selectedAnnee="";};
  d3.select(".svgGraphMinistereContainer").select("svg").remove();
  draw();
}

draw();

function draw() {

var width = 720,
    height = 720,
    outerRadius = Math.min(width, height) / 2 - 10,
    innerRadius = outerRadius - 24;

var formatPercent = d3.format(".1%");

var arc = d3.svg.arc()
    .innerRadius(innerRadius)
    .outerRadius(outerRadius);

var layout = d3.layout.chord()
    .padding(.04)
    .sortSubgroups(d3.descending)
    .sortChords(d3.ascending);

var path = d3.svg.chord()
    .radius(innerRadius);

var svg = d3.select(".svgGraphMinistereContainer").append("svg")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("id", "circle")
    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

svg.append("circle")
    .attr("r", outerRadius);

// var dsv = d3.dsv(";", "text/plain");
// dsv.parseRows("data/mpubliccomplet.csv",function(data){
var tabMinistere=[];
var tabAttributaire=[];
var tabMatrix=[];
var tabMatrix2=[];
var tabMatrixFin=[];
var tabMatrixFin2=[];
var tabMatrixFin3=[];
var noms=[];



//Génération chord

d3.tsv("data/mpublics2011-2012.csv", function(data) {
  var row1=data[0];
  console.log(row1.Montant);
  //for (var i = 0; i < data.length; i++) {
  //    console.log(data[i].Montant);
      
  //}

  function notEmpty(element) {
  return parseFloat((element.Montant).replace(",", "."))  > selectedMontantMin;
  }

  function filterMinistere(element) {
    if (selectedMinistere!=""){
      return (element.Ministere == selectedMinistere);    
    } else {
      return true;
    }
  }
  //filtre par nature de marche, attention au libelle
  function filterNature(element) {
    if (selectedNature!=""){
      return (element.NatureduMarche.toLowerCase().replace(/ /g,"") == selectedNature);    
    } else {
      return true;
    }
  }

  function filterAnnee(element) {
    if (selectedAnnee!=""){
      return (element.Annee == selectedAnnee);    
    } else {
      return true;
    }
  }

  
  function convert(e) { 
   return parseFloat((e.Montant).replace(",", "."));
  }
  console.log(selectedMinistere);
  var datafilt = data.filter(notEmpty);
  

  datafilt = datafilt.filter(filterMinistere);
  datafilt = datafilt.filter(filterNature);
  datafilt = datafilt.filter(filterAnnee);
  console.log(datafilt.length);

  datafilt.sort(function(a,b){
      return(parseFloat(a.Montant) < parseFloat(b.Montant));
  });  
  
  for (i = 0;i<nbvaleurs;i++){
    var row = new Object();
    row.Ministere=datafilt[i].Ministere;
    row.NomAttributaire=datafilt[i].NomAttributaire;
    row.Montant=datafilt[i].Montant;
    tabMatrix.push(row);
  }

  tabMatrix.sort(function(a,b){
    if(a.Ministere==b.Ministere){
      return (a.NomAttributaire<b.NomAttributaire);
    } else {
    return(a.Ministere<b.Ministere);
    }
  });
  //console.log(tabMatrix);
  

  /*
  tabMatrix.forEach(function(e){
    console.log(e.Ministere + ' - ' + e.NomAttributaire);
  });*/

//Ministères Attributaires uniques
  tabMatrix.map(function(datamap){
    
    var minis = datamap.Ministere;
    tabMinistere.push(minis);
    tabAttributaire.push(datamap.NomAttributaire);

  });

  var utabMinistere = tabMinistere.filter(onlyUnique);
  var utabAttributaire = tabAttributaire.filter(onlyUnique);
  //console.log(utabAttributaire);
  
  //init tableau 2 dimensions
  for(i=0;i<utabMinistere.length;i++){
    tabMatrixFin[i]=new Array(utabAttributaire.length);
  }
  
  //remplissage matrice
  tabMatrix.forEach(function(e){
    tabMatrixFin[utabMinistere.indexOf(e.Ministere)][utabAttributaire.indexOf(e.NomAttributaire)]=e.Montant;
  });

  //console.log(tabMatrixFin);
  for(i=0;i<utabMinistere.length;i++){
    for(j=0;j<tabMatrix.length;j++){
      if(tabMatrixFin[i][j]==null){
        tabMatrixFin[i][j]=0;
      }
    }
  }
  
  var taille=utabAttributaire.length+utabMinistere.length;
  for(i=0;i<taille;i++){
    tabMatrixFin2[i]=new Array();
    if(i<utabMinistere.length) {
      for(j=utabMinistere.length;j<taille;j++){
        tabMatrixFin2[i][j]=tabMatrixFin[i][j - utabMinistere.length];
      }
    } else {
      for(j=0;j<utabMinistere.length;j++){
        tabMatrixFin2[i][j]=tabMatrixFin[j][i - utabMinistere.length];
      }

    }
  }
  
  for(i=0;i<taille;i++){
    tabMatrixFin3[i]=new Array(j);
    for(j=0;j<taille;j++){
      if(tabMatrixFin2[i][j]==null){
        tabMatrixFin3[i][j]=0;
      } else {
        var str = tabMatrixFin2[i][j];
        tabMatrixFin3[i][j]=parseFloat(str);
      }
    }
  }


  utabMinistere.forEach(function(e){
    noms.push(e);
  });
  utabAttributaire.forEach(function(e){
    noms.push(e);
  });
  console.log(noms);
  /*
  //pour exporter en csv
  var csvContent = "data:text/csv;charset=utf-8,";
  tabMatrixFin2.forEach(function(infoArray, index){

  dataString = infoArray.join(";");
  csvContent += index < infoArray.length ? dataString+ "\n" : dataString;

  }); 
  var encodedUri = encodeURI(csvContent);
  window.open(encodedUri);
  */





  // Compute the chord layout.
  layout.matrix(tabMatrixFin3);
  
  // Add a group per neighborhood.
  var group = svg.selectAll(".group")
      .data(layout.groups)
    .enter().append("g")
      .attr("class", "group")
      .on("mouseover", mouseover);

  // Add a mouseover title.
  group.append("title").text(function(d, i) {
    return noms[i] + ": " + Math.round(d.value).toLocaleString() + " €";
  });
  
  // Add the group arc.
  var groupPath = group.append("path")
      .attr("id", function(d, i) { return "group" + i; })
      .attr("d", arc);
  //    .style("fill", function(d, i) { return cities[i].color; });

  // Add a text label.
  var groupText = group.append("text")
      .attr("x", 6)
      .attr("dy", 15);

  groupText.append("textPath")
      .attr("xlink:href", function(d, i) { return "#group" + i; })
      .text(function(d, i) { return noms[i]; });

  // Remove the labels that don't fit. :(
  groupText.filter(function(d, i) { return groupPath[0][i].getTotalLength() / 2 - 16 < this.getComputedTextLength(); })
      .remove();

  // Add the chords.
  var chord = svg.selectAll(".chord")
      .data(layout.chords)
    .enter().append("path")
      .attr("class", "chord")
      .style("fill", function(d) { return couleurs[utabMinistere.indexOf(noms[d.source.index])]; })
      .attr("d", path);

  // Add an elaborate mouseover title for each chord.
  chord.append("title").text(function(d) {
    return noms[d.source.index]
        + " - " + noms[d.target.index]
        // + ": " + formatPercent(d.source.value)
+ ": " + Math.round(d.target.value).toLocaleString() + " €";          
  });

  function mouseover(d, i) {
    chord.classed("fade", function(p) {
      return p.source.index != i
          && p.target.index != i;
    });
  }
});

}

</script>


        
    </body>

</html>

